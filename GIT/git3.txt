Rebase

    Reorganiza y aplica los cambios de una rama sobre otra rama. No hace fusion de ramas,
    sino que inserta los commits de una rama en la parte superior de la otra, generando un nuevo commit con todo el historial de la rama destino + los que tenia en la rama origen.

    >git rebase <rama>

    Ejemplo: Me posiciono en la rama desarrollo y lanzo el comando "git rebase master"

PASOS DEL COMANDO REBASE:

    1)Determina que commits necesitan ser reorganizados
    2) Guarda puntos de referencia (refs) en una carpeta temporal
    3) Aplicac commits de la rama origen sobre la rama destino
    4) Resolucion de conflictos
    5) Creacion de los nuevos commits
    6) Avanza la referencia de la rama destino al ultimo commit creado
    7) Elimina los puntos de referencia temporales (refs)
    8) Finaliza el proceso de Rebase

BENEFICIOS DE USAR MERGE

    -Podemos conservar el historial de commits de la rama origen
    -No se pierde informacion
    -No se modifica el historial de commits de la rama destino

------------------------------------------------------------------------
Stash

    Este comando nos sirve para cambiar de rama sin necesidad de hacer un commit. Guarda los cambios en
    una pila temporal mediante el comando

    > git stash

    Una vez hecho el stash ya podemos cambiar de rama.
    Para recuperar el ultimo stash

    > git stash apply

    Para recuperar el ultimo stash y eliminarlo de la lista:

    > git stash pop

    Para ver que tenemos el stash

    > git stash list

    Para recuperar stash mas antiguos

    > git stash apply --index #indice

    Para limpiar la lista de stash:

    > git stash clear
------------------------------------------------------------------------
BISECT

    Nos ayuda a automatizar la busqueda de un commit que introdujo un bug en nuestro codigo.

    1) Iniciar el modo bisect
        >git bisect start

    2) Definir 1 commit bueno y 1 commit malo
        >git bisect good <commit>
        >git bisect bad <commit>

        si aborta porque nos olvidamos de hacer un commit retomamos con:
            >git bisect next

    3) Git automaticamente nos movera a un commit intermedio
        >git bisect good|bad

    4) Repetir el paso 3 hasta encontrar el commit que introdujo el bug

    5) Finalizar el modo bisect
        >git bisect reset

------------------------------------------------------------------------
Tags


    Son etiquetas que agregamos a los commits a modo de distinciÃ³n para identificar lanzamientos de 
    versiones, hitos, etc ...

    Si le voy a poner una etiqueta al commit actual:

    > git tag <nombre_del_tag>

    Si queremos poner una etiqueta en un commit antiguo

    > git tag <nombre_del_tag> <hash>

Tag Ligeros o No Anotados


    Se especifica nombre del tag al crearlo (y hash en caso de aplicarlo en un commit antiguo).
    No incluyen info adicional

Tag Anotados

    Para el commit actual:
    > git tag -a <nombre_del_tag> -m <mensaje>

    Para commits antiguos:
    > git tag -a <nombre_del_tag> <hash> -m <mensaje>

    Si queremos modificar el mensaje

    > git tag -a -f <nombre_del_tag> -m <mensaje_cambiado>

    Elimar tag:

    > git tag -d <nombre_del_tag>

    Enviar tags a repo remoto:

    > git push origin <nombre_del_tag>

    Si tenemos muchos tags:

    > git push origin --tags

    Recibir tags de un repo remoto:

    > git fetch origin --tags

------------------------------------------------------------------------

ejercicio 1:
Trabajamos en un repositorio website en una branch llamada custom-navbar.
Pausar el trabajo en el commit actual y borrar el archivo status.js del branch master

    >git stash
    >git checkout master
    >git rm status.js
    >git commit -m "remove status.js"
    >git checkout custom-navbar
    >git stash pop

Resolucion:

    >git stash
    >git checkout master
    >git rm status.js
    >git commit -m "remove status.js"
    >git checkout custom-navbar
    >git stash pop

    //para borrar todos los stash
    >git stash clear

    //para borrar el ultimo stash
    >git stash drop

------------------------------------------------------------------------
